import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_pos_printer_platform_image_3/flutter_pos_printer_platform_image_3.dart';
import 'package:flutter_esc_pos_utils/flutter_esc_pos_utils.dart';
import '../services/config_service.dart';

class PrinterService extends ChangeNotifier {
  var defaultPrinterType = PrinterType.bluetooth;
  var _isBle = false;
  var _reconnect = false;
  var printerManager = PrinterManager.instance;
  var devices = <BluetoothPrinter>[];

  // Lista de impresoras virtuales a ignorar
  final List<String> _virtualPrintersToIgnore = [
    'microsoft print to pdf',
    'microsoft xps document writer',
    'onenote',
    'fax',
    'onenote for windows',
    'onenote (desktop)',
    'send to onenote',
    'printer to pdf',
    'pdf creator',
    'adobe pdf',
    'doro pdf writer',
    'print to pdf',
    'foxit pdf',
    'pdf printer',
    'pdf24',
    'nitro pdf',
    'cutepdf',
    'bullzip',
    'xps',
    'document writer',
    'virtual printer',
  ];

  // SOPORTE PARA M√öLTIPLES IMPRESORAS
  // Mapa de impresoras conectadas [nombre -> impresora]
  final Map<String, BluetoothPrinter> _connectedPrinters = {};
  // Mapa de estados de conexi√≥n [nombre -> estado]
  final Map<String, bool> _connectionStatus = {};
  // Mapa de tama√±os de papel detectados [nombre -> tama√±o]
  final Map<String, PaperSize> _paperSizes = {};

  // Variables para retrocompatibilidad (impresora principal)
  BluetoothPrinter? selectedPrinter;
  var _isConnected = false;

  StreamSubscription<PrinterDevice>? _subscription;
  StreamSubscription<BTStatus>? _subscriptionBtStatus;
  StreamSubscription<USBStatus>? _subscriptionUsbStatus;
  BTStatus _currentStatus = BTStatus.none;
  USBStatus _currentUsbStatus = USBStatus.none;
  List<int>? pendingTask;

  // Variables para configuraci√≥n de impresora de red
  String _ipAddress = '';
  String _port = '9100';

  // Tama√±o de papel detectado (para retrocompatibilidad)
  PaperSize _detectedPaperSize = PaperSize.mm80;
  int _customPaperWidth = 80;
  bool _usingCustomPaperSize = false;

  // Timer para verificar autom√°ticamente el estado de las impresoras
  Timer? _connectionCheckTimer;
  // Callback para notificar cambios en el estado de conexi√≥n
  Function(bool isConnected, String? printerName)? onConnectionChanged;

  PrinterService() {
    // En Windows, preferir USB por defecto pero permitir Bluetooth tambi√©n
    if (Platform.isWindows) {
      defaultPrinterType = PrinterType.usb; // USB como predeterminado
    }
    _initListeners();
    _loadSavedPrinter();
    // Iniciar la verificaci√≥n autom√°tica del estado
    _initConnectionChecker();
  }
  bool get isConnected => _isConnected;
  bool get isBle => _isBle;
  bool get reconnect => _reconnect;
  List<BluetoothPrinter> get availableDevices => devices;
  BluetoothPrinter? get currentPrinter => selectedPrinter;
  PrinterType get printerType => defaultPrinterType;
  // Getter para obtener la direcci√≥n IP actual
  String get ipAddress => _ipAddress;

  // Getter para obtener el tama√±o de papel detectado
  PaperSize get detectedPaperSize => _detectedPaperSize;
  // Getter para el ancho personalizado del papel
  int get customPaperWidth => _customPaperWidth;
  // Getter para saber si se est√° usando un tama√±o personalizado
  bool get usingCustomPaperSize => _usingCustomPaperSize;

  // GETTERS PARA M√öLTIPLES IMPRESORAS
  // Obtener todas las impresoras conectadas
  Map<String, BluetoothPrinter> get connectedPrinters =>
      Map.unmodifiable(_connectedPrinters);
  // Obtener el estado de todas las impresoras
  Map<String, bool> get printerConnectionStatus =>
      Map.unmodifiable(_connectionStatus);
  // Obtener una impresora espec√≠fica por nombre
  BluetoothPrinter? getPrinterByName(String name) => _connectedPrinters[name];
  // Verificar si una impresora espec√≠fica est√° conectada
  bool isPrinterConnected(String name) => _connectionStatus[name] ?? false;
  // M√©todo para debuggear informaci√≥n de impresoras
  void debugPrinterInfo() {
    print('üìä === DEBUG PRINTER INFO ===');
    print('üìä _connectedPrinters: ${_connectedPrinters.keys.toList()}');
    print('üìä _paperSizes Map:');
    _paperSizes.forEach((name, size) {
      String sizeStr = size.toString().split('.').last; // mm58, mm72, mm80
      print('üìä   $name: $sizeStr');
    });
    print('üìä _connectionStatus: $_connectionStatus');
    print('üìä === END DEBUG ===');
  }

  // Obtener el tama√±o de papel de una impresora espec√≠fica
  PaperSize getPaperSize(String name) {
    final paperSize = _paperSizes[name] ?? PaperSize.mm80;
    String sizeStr = paperSize.toString().split('.').last; // mm58, mm72, mm80
    print(
      'üîç getPaperSize para $name: $sizeStr (disponible en _paperSizes: ${_paperSizes.containsKey(name)})',
    );
    return paperSize;
  }

  // M√©todo para corregir configuraciones existentes (√∫til para debugging)
  Future<void> fixExistingPrinterConfiguration(
    String printerName,
    PaperSize correctSize,
  ) async {
    // Debug temporal para entender qu√© est√° pasando
    print('üîß === INICIO DEBUG DETALLADO ===');
    print('üîß printerName: $printerName');
    print('üîß correctSize recibido: $correctSize');
    print('üîß correctSize == PaperSize.mm58: ${correctSize == PaperSize.mm58}');
    print('üîß correctSize == PaperSize.mm72: ${correctSize == PaperSize.mm72}');
    print('üîß correctSize == PaperSize.mm80: ${correctSize == PaperSize.mm80}');
    print('üîß Valor actual en _paperSizes: ${_paperSizes[printerName]}');
    print('üîß === FIN DEBUG DETALLADO ===');

    String sizeStr = correctSize.toString().split('.').last; // mm58, mm72, mm80
    print('üîß Corrigiendo configuraci√≥n de $printerName a $sizeStr');

    // Actualizar en memoria
    _paperSizes[printerName] = correctSize;

    // Guardar en configuraci√≥n
    await ConfigService.savePrinterPaperSize(printerName, correctSize);

    String confirmedSizeStr = _paperSizes[printerName].toString().split('.').last;
    print('‚úÖ Configuraci√≥n corregida para $printerName: $confirmedSizeStr');
    notifyListeners();
  }

  // Configurar el tama√±o de papel para una impresora espec√≠fica
  Future<void> setPaperSizeForPrinter(
    String printerName,
    PaperSize paperSize,
  ) async {
    print('üîß setPaperSizeForPrinter llamado para $printerName con $paperSize');
    print(
      'üîß Impresora existe en _connectedPrinters: ${_connectedPrinters.containsKey(printerName)}',
    );
    print('üîß Valor anterior en _paperSizes: ${_paperSizes[printerName]}');

    if (_connectedPrinters.containsKey(printerName)) {
      _paperSizes[printerName] = paperSize;

      // Guardar en configuraci√≥n
      await ConfigService.savePrinterPaperSize(printerName, paperSize);

      print('üìÑ Tama√±o de papel configurado para $printerName: $paperSize');
      print('üîß Valor actualizado en _paperSizes: ${_paperSizes[printerName]}');
      notifyListeners();
    } else {
      print('‚ùå Impresora $printerName no est√° en _connectedPrinters');
    }
  }

  // Obtener lista de nombres de impresoras conectadas
  List<String> get connectedPrinterNames => _connectedPrinters.keys.toList();

  set isBle(bool value) {
    _isBle = value;
    notifyListeners();
  }

  set reconnect(bool value) {
    _reconnect = value;
    notifyListeners();
  }

  // Inicializar listeners para el estado de la impresora
  void _initListeners() {
    // Bluetooth
    _subscriptionBtStatus = PrinterManager.instance.stateBluetooth.listen((
      status,
    ) {
      _currentStatus = status;

      // Si es la impresora bluetooth seleccionada, actualizar estado de conexi√≥n
      if (selectedPrinter?.typePrinter == PrinterType.bluetooth) {
        if (status == BTStatus.connected && !_isConnected) {
          _isConnected = true;
          notifyListeners();
          print('‚úÖ Estado de Bluetooth actualizado: Conectado');
        } else if (status == BTStatus.none && _isConnected) {
          _isConnected = false;
          notifyListeners();
          print('‚ùå Estado de Bluetooth actualizado: Desconectado');
        }
      }

      if (status == BTStatus.connected && pendingTask != null) {
        if (Platform.isAndroid) {
          Future.delayed(const Duration(milliseconds: 1000), () {
            PrinterManager.instance.send(
              type: PrinterType.bluetooth,
              bytes: pendingTask!,
            );
            pendingTask = null;
          });
        } else if (Platform.isIOS) {
          PrinterManager.instance.send(
            type: PrinterType.bluetooth,
            bytes: pendingTask!,
          );
          pendingTask = null;
        }
      }
    }); // USB
    _subscriptionUsbStatus = PrinterManager.instance.stateUSB.listen((status) {
      _currentUsbStatus =
          status; // Actualiza el estado actual de la conexi√≥n USB
      print('Estado USB actual: $_currentUsbStatus'); // Log para depuraci√≥n

      // Actualizar el estado de conexi√≥n basado en el estado USB
      if (selectedPrinter?.typePrinter == PrinterType.usb) {
        bool newConnectionState = (status == USBStatus.connected);
        if (newConnectionState != _isConnected) {
          _isConnected = newConnectionState;
          notifyListeners();
          print(
            newConnectionState
                ? '‚úÖ Estado de USB actualizado: Conectado'
                : '‚ùå Estado de USB actualizado: Desconectado',
          );
        }
      }

      if (Platform.isAndroid) {
        if (status == USBStatus.connected && pendingTask != null) {
          Future.delayed(const Duration(milliseconds: 1000), () {
            PrinterManager.instance.send(
              type: PrinterType.usb,
              bytes: pendingTask!,
            );
            pendingTask = null;
          });
        }
      }
    });
  }

  // Inicializar el timer para verificar el estado de conexi√≥n
  void _initConnectionChecker() {
    // Cancelar cualquier timer existente
    _connectionCheckTimer?.cancel();

    // Crear un nuevo timer para verificar la conexi√≥n cada 5 segundos
    _connectionCheckTimer = Timer.periodic(const Duration(seconds: 5), (_) {
      _checkPrinterConnection();
    });
  }

  // Verificar el estado de conexi√≥n de la impresora
  Future<void> _checkPrinterConnection() async {
    if (selectedPrinter == null) return;

    try {
      bool isConnectedNow = false;

      // Intentar verificar si la impresora est√° conectada seg√∫n su tipo
      switch (selectedPrinter!.typePrinter) {
        case PrinterType.bluetooth:
          // Para Bluetooth, utilizamos el estado actual del stream
          isConnectedNow = (_currentStatus == BTStatus.connected);
          break;

        case PrinterType.usb:
          // Para USB, utilizamos el estado actual del stream USB
          isConnectedNow = (_currentUsbStatus == USBStatus.connected);
          break;

        case PrinterType.network:
          // Para impresoras de red, intentamos una "ping" b√°sica
          try {
            // Verificamos la impresora intentando abrir una conexi√≥n
            await printerManager.connect(
              type: PrinterType.network,
              model: TcpPrinterInput(
                ipAddress: selectedPrinter!.address!,
                port: int.tryParse(selectedPrinter!.port ?? '9100') ?? 9100,
                timeout: const Duration(
                  seconds: 2,
                ), // Timeout corto para verificaci√≥n
              ),
            );
            isConnectedNow = true;
          } catch (e) {
            print('‚ùå Impresora de red no disponible: ${e.toString()}');
            isConnectedNow = false;
          }
          break;
      }

      // Si el estado cambi√≥, actualizar y notificar
      if (isConnectedNow != _isConnected) {
        _isConnected = isConnectedNow;
        notifyListeners();
        print(
          isConnectedNow
              ? '‚úÖ Impresora conectada: ${selectedPrinter!.deviceName}'
              : '‚ùå Impresora desconectada: ${selectedPrinter!.deviceName}',
        );
      }
    } catch (e) {
      print('‚ùå Error al verificar estado de la impresora: $e');
    }
  }

  // Cargar impresora guardada
  Future<void> _loadSavedPrinter() async {
    try {
      // Cargar impresora principal (para retrocompatibilidad)
      final printer = await ConfigService.loadSelectedPrinter();
      if (printer != null) {
        selectedPrinter = printer;
        defaultPrinterType = printer.typePrinter;
        _isBle = printer.isBle ?? false;

        // Si es una impresora de red, actualizar las variables locales
        if (printer.typePrinter == PrinterType.network &&
            printer.address != null) {
          _ipAddress = printer.address!;
          _port = printer.port ?? '9100';
        }

        // Detectar tama√±o de papel
        await detectPaperSize();

        // Intentar conectar a la impresora
        await _connectToPrinter();
      }

      // Cargar todas las impresoras conectadas
      final connectedPrinters = await ConfigService.loadAllConnectedPrinters();
      // Cargar todos los tama√±os de papel guardados
      final savedPaperSizes = await ConfigService.loadAllPrinterPaperSizes();

      for (final entry in connectedPrinters.entries) {
        final printerName = entry.key;
        final printerData = entry.value;

        print('üìÇ Cargando impresora guardada: $printerName');

        // Agregar a la lista de conectadas
        _connectedPrinters[printerName] = printerData;

        // Cargar tama√±o de papel guardado o detectar autom√°ticamente
        PaperSize paperSize;
        if (savedPaperSizes.containsKey(printerName)) {
          paperSize = savedPaperSizes[printerName]!;
          print('üìÑ Tama√±o de papel cargado para $printerName: $paperSize');
        } else {
          paperSize = await _detectPaperSizeForPrinter(printerData);
          print('üìÑ Tama√±o de papel detectado para $printerName: $paperSize');
        }
        _paperSizes[printerName] = paperSize;

        // Intentar conectar
        final isConnected = await _connectToPrinterByName(printerName);
        _connectionStatus[printerName] = isConnected;

        print(
          '‚úÖ Impresora $printerName ${isConnected ? "conectada" : "cargada"}',
        );
      }

      // Cargar la configuraci√≥n de tama√±o de papel personalizado
      final customWidth = await ConfigService.loadCustomPaperWidth();
      final usingCustom = await ConfigService.loadUsingCustomPaperSize();

      if (customWidth != null && customWidth > 0) {
        _customPaperWidth = customWidth;
      }

      if (usingCustom != null) {
        _usingCustomPaperSize = usingCustom;
      }

      notifyListeners();
    } catch (e) {
      print('Error al cargar las impresoras guardadas: $e');
    }
  }

  // M√©todo para detectar autom√°ticamente el tama√±o de papel seg√∫n tipo de impresora
  Future<PaperSize> detectPaperSize() async {
    if (selectedPrinter == null) {
      print('No hay impresora seleccionada para detectar tama√±o de papel');
      return PaperSize.mm80; // Valor por defecto
    }

    try {
      // Seg√∫n el tipo de impresora, podemos aplicar diferentes estrategias
      switch (selectedPrinter!.typePrinter) {
        case PrinterType.usb:
          // Para impresoras USB, podemos usar el ID del producto para detectar el modelo
          if (selectedPrinter!.vendorId != null) {
            print(
              'Detectando tama√±o de papel para impresora USB: ${selectedPrinter!.vendorId}',
            );

            // Ejemplos de vendorId para diferentes tama√±os (ajustar seg√∫n tus impresoras)
            final vendorIdStr = selectedPrinter!.vendorId?.toString();
            if (vendorIdStr == '1155' || vendorIdStr == '7358') {
              _detectedPaperSize = PaperSize.mm58;
              print('Detectado tama√±o de papel: 58mm para impresora USB');
            } else if (vendorIdStr == '1659' || vendorIdStr == '8137') {
              _detectedPaperSize = PaperSize.mm80;
              print('Detectado tama√±o de papel: 80mm para impresora USB');
            } else {
              _detectedPaperSize = PaperSize.mm80; // Valor por defecto
              print(
                'Usando tama√±o de papel por defecto: 80mm para impresora USB',
              );
            }
          }
          break;

        case PrinterType.bluetooth:
          // Para impresoras Bluetooth, podemos usar el nombre del dispositivo
          print(
            'Detectando tama√±o de papel para impresora Bluetooth: ${selectedPrinter!.deviceName}',
          );
          final deviceName = selectedPrinter!.deviceName?.toLowerCase() ?? '';

          if (deviceName.contains('58') ||
              deviceName.contains('5802') ||
              deviceName.contains('58mm')) {
            _detectedPaperSize = PaperSize.mm58;
            print(
              'Detectado tama√±o de papel: 58mm basado en nombre del dispositivo Bluetooth',
            );
          } else if (deviceName.contains('80') ||
              deviceName.contains('8002') ||
              deviceName.contains('80mm')) {
            _detectedPaperSize = PaperSize.mm80;
            print(
              'Detectado tama√±o de papel: 80mm basado en nombre del dispositivo Bluetooth',
            );
          } else {
            _detectedPaperSize = PaperSize.mm80; // Valor por defecto
            print(
              'Usando tama√±o de papel por defecto: 80mm para impresora Bluetooth',
            );
          }
          break;

        case PrinterType.network:
          // Para impresoras de red, podr√≠amos usar informaci√≥n almacenada o configuraci√≥n
          print(
            'Detectando tama√±o de papel para impresora de red: ${selectedPrinter!.address}',
          );
          // Aqu√≠ podr√≠as a√±adir l√≥gica espec√≠fica para tus impresoras de red
          _detectedPaperSize = PaperSize.mm80; // Valor por defecto para red
          print(
            'Usando tama√±o de papel por defecto: 80mm para impresora de red',
          );
          break;
      }

      notifyListeners();
      return _detectedPaperSize;
    } catch (e) {
      print('Error al detectar tama√±o de papel: $e');
      _detectedPaperSize = PaperSize.mm80; // Valor seguro por defecto
      return _detectedPaperSize;
    }
  } // Escanear dispositivos

  void scanDevices() {
    devices.clear();
    _subscription?.cancel();
    _subscription = printerManager
        .discovery(type: defaultPrinterType, isBle: _isBle)
        .listen((device) {
          // Verificar si es una impresora virtual que debemos ignorar
          final deviceNameLower = device.name.toLowerCase();
          bool isVirtualPrinter = _virtualPrintersToIgnore.any(
            (virtualName) => deviceNameLower.contains(virtualName),
          );

          // Solo agregar si no es una impresora virtual
          if (!isVirtualPrinter) {
            devices.add(
              BluetoothPrinter(
                deviceName: device.name,
                address: device.address,
                isBle: _isBle,
                vendorId: device.vendorId,
                productId: device.productId,
                typePrinter: defaultPrinterType,
              ),
            );
            notifyListeners();
          } else {
            print('Ignorando impresora virtual: ${device.name}');
          }
        });
  }

  // Seleccionar dispositivo
  Future<void> selectDevice(BluetoothPrinter device) async {
    // Para retrocompatibilidad, mantener la impresora principal
    if (selectedPrinter != null) {
      if ((device.address != selectedPrinter!.address) ||
          (device.typePrinter == PrinterType.usb &&
              selectedPrinter!.vendorId != device.vendorId)) {
        await PrinterManager.instance.disconnect(
          type: selectedPrinter!.typePrinter,
        );
      }
    }

    selectedPrinter = device;
    await ConfigService.saveSelectedPrinter(device);

    // Detectar el tama√±o de papel al seleccionar una nueva impresora
    await detectPaperSize();

    // Intentar conectar a la impresora
    await _connectToPrinter();

    // Solo agregar a la lista de impresoras conectadas si no est√° ya presente
    final deviceName = device.deviceName ?? 'Unknown';
    if (!_connectedPrinters.containsKey(deviceName)) {
      await addPrinter(device);
    }

    notifyListeners();
  }

  // M√âTODOS PARA M√öLTIPLES IMPRESORAS
  // Agregar una impresora a la lista de conectadas con configuraci√≥n manual de tama√±o
  Future<void> addPrinterWithManualSize(
    BluetoothPrinter printer,
    PaperSize paperSize,
  ) async {
    final printerName = printer.deviceName ?? 'Unknown';

    print(
      'üñ®Ô∏è Agregando impresora: $printerName con tama√±o manual: $paperSize',
    );

    // Agregar a la lista de conectadas
    _connectedPrinters[printerName] = printer;

    // Configurar el tama√±o de papel especificado manualmente
    _paperSizes[printerName] = paperSize;

    // Intentar conectar
    final isConnected = await _connectToPrinterByName(printerName);
    _connectionStatus[printerName] = isConnected;

    // Guardar en configuraci√≥n
    await ConfigService.saveConnectedPrinter(printerName, printer);
    await ConfigService.savePrinterPaperSize(printerName, paperSize);

    print(
      '‚úÖ Impresora $printerName ${isConnected ? "conectada" : "agregada pero no conectada"} con tama√±o $paperSize',
    );
    notifyListeners();
  }

  // Agregar una impresora a la lista de conectadas (m√©todo existente para retrocompatibilidad)
  Future<void> addPrinter(BluetoothPrinter printer) async {
    final printerName = printer.deviceName ?? 'Unknown';

    print('üñ®Ô∏è Agregando impresora: $printerName');

    // Agregar a la lista de conectadas
    _connectedPrinters[printerName] = printer;

    // Verificar si ya tiene un tama√±o de papel configurado
    PaperSize paperSize;
    if (_paperSizes.containsKey(printerName)) {
      // Usar el tama√±o ya configurado
      paperSize = _paperSizes[printerName]!;
      print(
        'üìÑ Usando tama√±o de papel ya configurado para $printerName: $paperSize',
      );
    } else {
      // Cargar desde configuraci√≥n guardada o usar tama√±o por defecto
      final savedPaperSize = await ConfigService.loadPrinterPaperSize(
        printerName,
      );
      if (savedPaperSize != null) {
        paperSize = savedPaperSize;
        print(
          'üìÑ Tama√±o de papel cargado desde configuraci√≥n para $printerName: $paperSize',
        );
      } else {
        // En lugar de auto-detectar, usar 80mm por defecto y requerir configuraci√≥n manual
        paperSize = PaperSize.mm80;
        print(
          'üìÑ Usando tama√±o por defecto para $printerName: $paperSize - requiere configuraci√≥n manual',
        );
      }
      _paperSizes[printerName] = paperSize;
    }

    // Intentar conectar
    final isConnected = await _connectToPrinterByName(printerName);
    _connectionStatus[printerName] = isConnected;

    // Guardar en configuraci√≥n
    await ConfigService.saveConnectedPrinter(printerName, printer);

    print(
      '‚úÖ Impresora $printerName ${isConnected ? "conectada" : "agregada pero no conectada"}',
    );
    notifyListeners();
  }

  // M√©todo para corregir configuraciones incorrectas de impresoras existentes
  Future<void> fixPrinterConfiguration(
    String printerName,
    PaperSize correctSize,
  ) async {
    if (_connectedPrinters.containsKey(printerName)) {
      print('üîß Corrigiendo configuraci√≥n de $printerName a $correctSize');

      // Actualizar en memoria
      _paperSizes[printerName] = correctSize;

      // Guardar en configuraci√≥n
      await ConfigService.savePrinterPaperSize(printerName, correctSize);

      print('‚úÖ Configuraci√≥n de $printerName corregida a $correctSize');
      notifyListeners();
    }
  }

  // M√©todo espec√≠fico para corregir POS58 Printer a 58mm
  Future<void> fixPOS58Configuration() async {
    const printerName = 'POS58 Printer';
    if (_connectedPrinters.containsKey(printerName)) {
      await fixPrinterConfiguration(printerName, PaperSize.mm58);
    }
  }

  // Remover una impresora de la lista
  Future<void> removePrinter(String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer != null) {
      print('üóëÔ∏è Removiendo impresora: $printerName');

      // Desconectar si est√° conectada
      try {
        await PrinterManager.instance.disconnect(type: printer.typePrinter);
      } catch (e) {
        print('Error al desconectar impresora $printerName: $e');
      }

      // Remover de todas las listas
      _connectedPrinters.remove(printerName);
      _connectionStatus.remove(printerName);
      _paperSizes.remove(printerName);

      // Remover de configuraci√≥n
      await ConfigService.removeConnectedPrinter(printerName);
      await ConfigService.removePrinterPaperSize(printerName);

      // Si era la impresora principal, limpiar
      if (selectedPrinter?.deviceName == printerName) {
        selectedPrinter = null;
        _isConnected = false;
      }

      print('‚úÖ Impresora $printerName removida');
      notifyListeners();
    }
  }

  // Conectar a una impresora espec√≠fica por nombre
  Future<bool> connectToPrinter(String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer == null) {
      print('‚ùå Impresora no encontrada: $printerName');
      return false;
    }

    final isConnected = await _connectToPrinterByName(printerName);
    _connectionStatus[printerName] = isConnected;
    notifyListeners();
    return isConnected;
  }

  // Desconectar una impresora espec√≠fica
  Future<void> disconnectPrinter(String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer != null) {
      try {
        await PrinterManager.instance.disconnect(type: printer.typePrinter);
        _connectionStatus[printerName] = false;

        // Si era la impresora principal, actualizar estado
        if (selectedPrinter?.deviceName == printerName) {
          _isConnected = false;
        }

        print('‚úÖ Impresora $printerName desconectada');
        notifyListeners();
      } catch (e) {
        print('‚ùå Error al desconectar impresora $printerName: $e');
      }
    }
  }

  // Detectar tama√±o de papel para una impresora espec√≠fica
  Future<PaperSize> _detectPaperSizeForPrinter(BluetoothPrinter printer) async {
    try {
      PaperSize detectedSize = PaperSize.mm80; // Valor por defecto

      switch (printer.typePrinter) {
        case PrinterType.usb:
          if (printer.vendorId != null) {
            print(
              'Detectando tama√±o de papel para impresora USB: ${printer.vendorId}',
            );

            final vendorIdStr = printer.vendorId.toString();
            if (vendorIdStr == '1155' || vendorIdStr == '7358') {
              detectedSize = PaperSize.mm58;
            } else if (vendorIdStr == '1659' || vendorIdStr == '8137') {
              detectedSize = PaperSize.mm80;
            }
          }
          break;

        case PrinterType.bluetooth:
          final deviceName = printer.deviceName?.toLowerCase() ?? '';
          print(
            'Detectando tama√±o de papel para impresora Bluetooth: ${printer.deviceName}',
          );

          if (deviceName.contains('58') ||
              deviceName.contains('5802') ||
              deviceName.contains('58mm')) {
            detectedSize = PaperSize.mm58;
          } else if (deviceName.contains('80') ||
              deviceName.contains('8002') ||
              deviceName.contains('80mm')) {
            detectedSize = PaperSize.mm80;
          }
          break;

        case PrinterType.network:
          print(
            'Detectando tama√±o de papel para impresora de red: ${printer.address}',
          );
          detectedSize = PaperSize.mm80; // Valor por defecto para red
          break;
      }

      print(
        'Tama√±o de papel detectado para ${printer.deviceName}: $detectedSize',
      );
      return detectedSize;
    } catch (e) {
      print('Error al detectar tama√±o de papel para ${printer.deviceName}: $e');
      return PaperSize.mm80;
    }
  }

  // Conectar a una impresora espec√≠fica por nombre (m√©todo interno)
  Future<bool> _connectToPrinterByName(String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer == null) {
      print('‚ùå Impresora no encontrada para conectar: $printerName');
      return false;
    }

    print(
      'Intentando conectar a impresora: $printerName (${printer.typePrinter})',
    );

    try {
      switch (printer.typePrinter) {
        case PrinterType.usb:
          await printerManager.connect(
            type: printer.typePrinter,
            model: UsbPrinterInput(
              name: printer.deviceName,
              productId: printer.productId,
              vendorId: printer.vendorId,
            ),
          );
          print('‚úÖ Conectado exitosamente a impresora USB: $printerName');
          return true;

        case PrinterType.bluetooth:
          await printerManager.connect(
            type: printer.typePrinter,
            model: BluetoothPrinterInput(
              name: printer.deviceName,
              address: printer.address!,
              isBle: printer.isBle ?? false,
              autoConnect: _reconnect,
            ),
          );
          print(
            'üì° Solicitud de conexi√≥n Bluetooth enviada para: $printerName',
          );
          // Para Bluetooth, el estado se actualiza en el listener
          return true;

        case PrinterType.network:
          await printerManager.connect(
            type: printer.typePrinter,
            model: TcpPrinterInput(
              ipAddress: printer.address!,
              port: int.tryParse(printer.port ?? '9100') ?? 9100,
            ),
          );
          print('‚úÖ Conectado exitosamente a impresora de red: $printerName');
          return true;
      }
    } catch (e) {
      print('‚ùå Error al conectar con la impresora $printerName: $e');
      return false;
    }
  }

  Future<void> _connectToPrinter() async {
    if (selectedPrinter == null) return;

    print(
      'Intentando conectar a impresora: ${selectedPrinter!.deviceName} (${selectedPrinter!.typePrinter})',
    );

    try {
      switch (selectedPrinter!.typePrinter) {
        case PrinterType.usb:
          print('Conectando a impresora USB: ${selectedPrinter!.deviceName}');
          await printerManager.connect(
            type: selectedPrinter!.typePrinter,
            model: UsbPrinterInput(
              name: selectedPrinter!.deviceName,
              productId: selectedPrinter!.productId,
              vendorId: selectedPrinter!.vendorId,
            ),
          );
          _isConnected = true;
          print('Conectado exitosamente a impresora USB');
          break;

        case PrinterType.bluetooth:
          print(
            'Conectando a impresora Bluetooth: ${selectedPrinter!.deviceName} (${selectedPrinter!.address})',
          );
          await printerManager.connect(
            type: selectedPrinter!.typePrinter,
            model: BluetoothPrinterInput(
              name: selectedPrinter!.deviceName,
              address: selectedPrinter!.address!,
              isBle: selectedPrinter!.isBle ?? false,
              autoConnect: _reconnect,
            ),
          );
          print('Solicitud de conexi√≥n Bluetooth enviada');
          break;

        case PrinterType.network:
          print(
            'Conectando a impresora de red: ${selectedPrinter!.address}:${selectedPrinter!.port ?? "9100"}',
          );
          await printerManager.connect(
            type: selectedPrinter!.typePrinter,
            model: TcpPrinterInput(
              ipAddress: selectedPrinter!.address!,
              port: int.tryParse(selectedPrinter!.port ?? '9100') ?? 9100,
            ),
          );
          _isConnected = true;
          print('Conectado exitosamente a impresora de red');
          break;
      }

      notifyListeners();
    } catch (e) {
      print('Error al conectar con la impresora: $e');
      _isConnected = false;
      notifyListeners();
    }
  }

  // M√©todo p√∫blico para reconectarse a la impresora
  Future<void> reconnectPrinter() async {
    if (selectedPrinter == null) return;

    try {
      // Primero desconectamos
      await printerManager.disconnect(type: selectedPrinter!.typePrinter);
      _isConnected = false;
      notifyListeners();

      // Esperamos un momento antes de reconectar
      await Future.delayed(const Duration(milliseconds: 500));

      // Luego reconectamos
      await _connectToPrinter();
    } catch (e) {
      print('Error al reconectar la impresora: $e');
    }
  }

  // Imprimir mensaje de texto simple
  Future<void> printMessage(String message) async {
    if (selectedPrinter == null) return;

    List<int> bytes = [];
    final profile = await CapabilityProfile.load(name: 'XP-N160I');

    // Usar el tama√±o de papel actual (detectado o personalizado)
    final paperSize = getCurrentPaperSize();
    final generator = Generator(paperSize, profile);

    bytes += generator.setGlobalCodeTable('CP1252');
    bytes += generator.text(message);

    _printEscPos(bytes, generator);
  }

  // Imprimir bytes directamente
  Future<void> printBytes(List<int> bytes) async {
    if (selectedPrinter == null) return;
    _printRawData(bytes);
  }

  // NUEVO: Imprimir bytes a una impresora espec√≠fica
  Future<bool> printBytesToPrinter(List<int> bytes, String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer == null) {
      print('‚ùå Impresora no encontrada: $printerName');
      return false;
    }

    if (!isPrinterConnected(printerName)) {
      print('‚ùå Impresora no conectada: $printerName');
      return false;
    }

    print('üñ®Ô∏è Imprimiendo en: $printerName (${printer.typePrinter})');

    try {
      await printerManager.send(type: printer.typePrinter, bytes: bytes);
      print('‚úÖ Impresi√≥n enviada exitosamente a: $printerName');
      return true;
    } catch (e) {
      print('‚ùå Error al imprimir en $printerName: $e');
      return false;
    }
  }

  // NUEVO: Generar bytes de impresi√≥n usando el tama√±o de papel espec√≠fico de la impresora
  Future<List<int>> generatePrintBytesForPrinter(
    String printerName,
    String content, {
    PosStyles? styles,
    bool addCut = true,
    bool addFeed = true,
  }) async {
    final printer = _connectedPrinters[printerName];
    if (printer == null) {
      throw Exception('Impresora no encontrada: $printerName');
    }

    // Obtener el tama√±o de papel espec√≠fico de esta impresora
    final paperSize = getPaperSize(printerName);

    print('üìÑ Generando contenido para $printerName con tama√±o: $paperSize');

    List<int> bytes = [];
    final profile = await CapabilityProfile.load(name: 'XP-N160I');
    final generator = Generator(paperSize, profile);

    bytes += generator.setGlobalCodeTable('CP1252');
    bytes += generator.text(content, styles: styles ?? const PosStyles());

    if (addFeed) {
      bytes += generator.feed(2);
    }

    if (addCut) {
      bytes += generator.cut();
    }

    return bytes;
  }

  // NUEVO: Imprimir contenido a una impresora espec√≠fica usando su tama√±o de papel
  Future<bool> printContentToPrinter(
    String printerName,
    String content, {
    PosStyles? styles,
    bool addCut = true,
    bool addFeed = true,
  }) async {
    try {
      final bytes = await generatePrintBytesForPrinter(
        printerName,
        content,
        styles: styles,
        addCut: addCut,
        addFeed: addFeed,
      );

      return await printBytesToPrinter(bytes, printerName);
    } catch (e) {
      print('‚ùå Error al imprimir contenido en $printerName: $e');
      return false;
    }
  }

  // M√©todo para imprimir datos RAW
  void _printRawData(List<int> bytes) async {
    if (selectedPrinter == null) {
      print('‚ùå No hay impresora seleccionada para imprimir datos');
      return;
    }

    var bluetoothPrinter = selectedPrinter!;
    print(
      'üñ®Ô∏è Intentando imprimir en: ${bluetoothPrinter.deviceName} (${bluetoothPrinter.typePrinter})',
    );

    try {
      // Verificar si la impresora ya est√° conectada
      bool needsConnection = !_isConnected;

      if (needsConnection) {
        print('üì° Conectando a la impresora...');
        switch (bluetoothPrinter.typePrinter) {
          case PrinterType.usb:
            await printerManager.connect(
              type: bluetoothPrinter.typePrinter,
              model: UsbPrinterInput(
                name: bluetoothPrinter.deviceName,
                productId: bluetoothPrinter.productId,
                vendorId: bluetoothPrinter.vendorId,
              ),
            );
            _isConnected = true;
            print(
              '‚úÖ Conectado a impresora USB: ${bluetoothPrinter.deviceName}',
            );
            break;

          case PrinterType.bluetooth:
            await printerManager.connect(
              type: bluetoothPrinter.typePrinter,
              model: BluetoothPrinterInput(
                name: bluetoothPrinter.deviceName,
                address: bluetoothPrinter.address!,
                isBle: bluetoothPrinter.isBle ?? false,
                autoConnect: _reconnect,
              ),
            );
            print(
              '‚úÖ Conectado a impresora Bluetooth: ${bluetoothPrinter.deviceName}',
            );
            break;

          case PrinterType.network:
            print(
              'üì° Conectando a impresora de red: ${bluetoothPrinter.address}:${bluetoothPrinter.port ?? "9100"}',
            );
            await printerManager.connect(
              type: bluetoothPrinter.typePrinter,
              model: TcpPrinterInput(
                ipAddress: bluetoothPrinter.address!,
                port: int.tryParse(bluetoothPrinter.port ?? '9100') ?? 9100,
              ),
            );
            _isConnected = true;
            print(
              '‚úÖ Conectado a impresora de red: ${bluetoothPrinter.address}',
            );
            break;
        }
      } else {
        print('‚ÑπÔ∏è Impresora ya conectada, enviando datos directamente');
      }

      // Enviar los bytes a la impresora
      print('üì§ Enviando ${bytes.length} bytes a la impresora...');
      await printerManager.send(
        type: bluetoothPrinter.typePrinter,
        bytes: bytes,
      );
      print('‚úÖ Datos enviados correctamente a la impresora');
    } catch (e, stackTrace) {
      print('‚ùå Error al imprimir datos RAW: $e');
      print('üìã Stack trace: $stackTrace');

      // Intentar reconectar si hubo un error de conexi√≥n
      if (!_isConnected) {
        print('üîÑ Intentando reconectar a la impresora...');
        try {
          await reconnectPrinter();
        } catch (reconnectError) {
          print('‚ùå Error al reconectar: $reconnectError');
        }
      }
    }
  }

  // M√©todo para imprimir
  void _printEscPos(List<int> bytes, Generator generator) async {
    if (selectedPrinter == null) return;
    var bluetoothPrinter = selectedPrinter!;
    switch (bluetoothPrinter.typePrinter) {
      case PrinterType.usb:
        bytes += generator.feed(2);
        bytes += generator.cut();
        await printerManager.connect(
          type: bluetoothPrinter.typePrinter,
          model: UsbPrinterInput(
            name: bluetoothPrinter.deviceName,
            productId: bluetoothPrinter.productId,
            vendorId: bluetoothPrinter.vendorId,
          ),
        );
        pendingTask = null;
        break;
      case PrinterType.bluetooth:
        bytes += generator.cut();
        await printerManager.connect(
          type: bluetoothPrinter.typePrinter,
          model: BluetoothPrinterInput(
            name: bluetoothPrinter.deviceName,
            address: bluetoothPrinter.address!,
            isBle: bluetoothPrinter.isBle ?? false,
            autoConnect: _reconnect,
          ),
        );
        pendingTask = null;
        if (Platform.isAndroid) pendingTask = bytes;
        break;
      case PrinterType.network:
        bytes += generator.feed(2);
        bytes += generator.cut();
        await printerManager.connect(
          type: bluetoothPrinter.typePrinter,
          model: TcpPrinterInput(ipAddress: bluetoothPrinter.address!),
        );
        break;
    }
    if (bluetoothPrinter.typePrinter == PrinterType.bluetooth &&
        Platform.isAndroid) {
      if (_currentStatus == BTStatus.connected) {
        printerManager.send(type: bluetoothPrinter.typePrinter, bytes: bytes);
        pendingTask = null;
      }
    } else {
      printerManager.send(type: bluetoothPrinter.typePrinter, bytes: bytes);
    }
  }

  // Configurar impresora de red
  void setNetworkPrinter(String ipAddress, String port) {
    _ipAddress = ipAddress;
    _port = port.isEmpty ? '9100' : port;
    print('Configurando impresora de red en $_ipAddress:$_port');

    // Crear un nombre descriptivo para la impresora de red
    final deviceName = 'Red-$ipAddress:$_port';

    var device = BluetoothPrinter(
      deviceName: deviceName,
      address: ipAddress,
      port: _port,
      typePrinter: PrinterType.network,
      state: false,
    );

    print('Registrando impresora de red: $deviceName');
    selectDevice(device);
  }

  // Cambiar tipo de impresora
  void setPrinterType(PrinterType type) {
    defaultPrinterType = type;
    scanDevices();
    notifyListeners();
  }

  // Setter para configurar un ancho personalizado
  void setCustomPaperWidth(int width) {
    if (width > 0) {
      _customPaperWidth = width;
      _usingCustomPaperSize = true;
      // Guardar en preferencias
      ConfigService.saveCustomPaperWidth(width);
      ConfigService.saveUsingCustomPaperSize(true);
      notifyListeners();
    }
  }

  // M√©todo para usar el tama√±o de papel detectado (deshabilitar personalizado)
  void useDetectedPaperSize() {
    _usingCustomPaperSize = false;
    // Guardar en preferencias
    ConfigService.saveUsingCustomPaperSize(false);
    notifyListeners();
  }

  // Obtener el tama√±o de papel actual a usar (detectado o personalizado)
  PaperSize getCurrentPaperSize() {
    if (_usingCustomPaperSize) {
      // Si el ancho es cercano a los valores est√°ndar, usar esos
      if (_customPaperWidth >= 76 && _customPaperWidth <= 84) {
        return PaperSize.mm80;
      } else if (_customPaperWidth >= 54 && _customPaperWidth <= 62) {
        return PaperSize.mm58;
      } else if (_customPaperWidth >= 68 && _customPaperWidth <= 76) {
        return PaperSize.mm72;
      }

      // Si no se ajusta a un est√°ndar, usar el m√°s cercano
      if (_customPaperWidth < 65) {
        return PaperSize.mm58;
      } else if (_customPaperWidth < 76) {
        return PaperSize.mm72;
      } else {
        return PaperSize.mm80;
      }
    }
    return _detectedPaperSize;
  }

  // Obtener una descripci√≥n legible del tama√±o de papel actual
  String getPaperSizeDescription() {
    if (_usingCustomPaperSize) {
      return "Personalizado (${_customPaperWidth}mm)";
    } else {
      final paperSize = _detectedPaperSize;
      return paperSize == PaperSize.mm58
          ? "58mm"
          : paperSize == PaperSize.mm80
          ? "80mm"
          : paperSize == PaperSize.mm72
          ? "72mm"
          : "Desconocido";
    }
  }

  // Obtener descripci√≥n legible del tama√±o de papel de una impresora espec√≠fica
  String getPaperSizeDescriptionForPrinter(String printerName) {
    final paperSize = getPaperSize(printerName);
    return paperSize == PaperSize.mm58
        ? "58mm"
        : paperSize == PaperSize.mm80
        ? "80mm"
        : paperSize == PaperSize.mm72
        ? "72mm"
        : "Desconocido";
  }

  // M√©todo para probar y verificar el tama√±o de papel actual
  Future<bool> printPaperSizeTest() async {
    if (selectedPrinter == null) {
      print('‚ùå No hay impresora seleccionada para la prueba');
      return false;
    }

    try {
      // Detectar papel (por si acaso no se ha hecho antes)
      await detectPaperSize();

      List<int> bytes = []; // Usar el mismo perfil que en printDirectRequest
      final profile = await CapabilityProfile.load(name: 'ITPP047');
      final paperSize = getCurrentPaperSize();
      final generator = Generator(paperSize, profile);

      // Encabezado
      // Establece la tabla de caracteres correcta      bytes += generator.setGlobalCodeTable('(Latvian)');
      bytes += generator.reset();

      bytes += generator.text(
        'PRUEBA DE TAMA√ëO DE PAPEL',
        styles: PosStyles(
          align: PosAlign.center,
          bold: true,
          height: PosTextSize.size2,
        ),
      );
      bytes += generator.text(
        '------------------------',
        styles: PosStyles(align: PosAlign.center),
      );

      bytes += generator.text('√±√±', styles: PosStyles(align: PosAlign.center));

      // Mostrar tama√±o de papel actual (detectado o personalizado)
      String paperSizeText;
      if (_usingCustomPaperSize) {
        paperSizeText = "Personalizado (${_customPaperWidth}mm)";
      } else {
        paperSizeText =
            paperSize == PaperSize.mm58
                ? "58mm"
                : paperSize == PaperSize.mm80
                ? "80mm"
                : paperSize == PaperSize.mm72
                ? "72mm"
                : "Desconocido";
      }

      bytes += generator.text(
        'Tama√±o actual: $paperSizeText',
        styles: PosStyles(align: PosAlign.center, bold: true),
      );

      if (_usingCustomPaperSize) {
        bytes += generator.text(
          'Tama√±o base: ${_detectedPaperSize == PaperSize.mm58
              ? "58mm"
              : _detectedPaperSize == PaperSize.mm80
              ? "80mm"
              : _detectedPaperSize == PaperSize.mm72
              ? "72mm"
              : "Desconocido"}',
          styles: PosStyles(align: PosAlign.center),
        );
      }

      bytes += generator.feed(1);

      // Informaci√≥n de la impresora
      bytes += generator.text(
        'Impresora: ${selectedPrinter!.deviceName ?? "Desconocida"}',
        styles: PosStyles(align: PosAlign.left),
      );
      bytes += generator.text(
        'Tipo: ${selectedPrinter!.typePrinter.toString().split('.').last}',
        styles: PosStyles(align: PosAlign.left),
      );

      if (selectedPrinter!.typePrinter == PrinterType.bluetooth) {
        bytes += generator.text(
          'Direcci√≥n: ${selectedPrinter!.address ?? "Desconocida"}',
          styles: PosStyles(align: PosAlign.left),
        );
        bytes += generator.text(
          'BLE: ${selectedPrinter!.isBle ?? false ? "S√≠" : "No"}',
          styles: PosStyles(align: PosAlign.left),
        );
      } else if (selectedPrinter!.typePrinter == PrinterType.usb) {
        bytes += generator.text(
          'Vendor ID: ${selectedPrinter!.vendorId ?? "Desconocido"}',
          styles: PosStyles(align: PosAlign.left),
        );
        bytes += generator.text(
          'Product ID: ${selectedPrinter!.productId ?? "Desconocido"}',
          styles: PosStyles(align: PosAlign.left),
        );
      } else if (selectedPrinter!.typePrinter == PrinterType.network) {
        bytes += generator.text(
          'IP: ${selectedPrinter!.address ?? "Desconocida"}',
          styles: PosStyles(align: PosAlign.left),
        );
        bytes += generator.text(
          'Puerto: ${selectedPrinter!.port ?? "9100"}',
          styles: PosStyles(align: PosAlign.left),
        );
      }
      bytes += generator.feed(1);

      // Indicadores de ancho seg√∫n el tama√±o actual
      if (paperSize == PaperSize.mm58) {
        bytes += generator.text(
          '1234567890123456789012345678901234',
          styles: PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '         58mm - 34 caracteres        ',
          styles: PosStyles(align: PosAlign.center),
        );
      } else if (paperSize == PaperSize.mm72) {
        bytes += generator.text(
          '123456789012345678901234567890123456789012',
          styles: PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '         72mm - 42 caracteres        ',
          styles: PosStyles(align: PosAlign.center),
        );
      } else {
        bytes += generator.text(
          '123456789012345678901234567890123456789012345678',
          styles: PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '            80mm - 48 caracteres            ',
          styles: PosStyles(align: PosAlign.center),
        );
      }

      bytes += generator.feed(2);
      bytes += generator.cut();

      // Imprimir
      await printBytes(bytes);

      print('‚úÖ Prueba de tama√±o de papel enviada a la impresora');
      return true;
    } catch (e) {
      print('‚ùå Error al imprimir prueba de tama√±o de papel: $e');
      return false;
    }
  }

  // NUEVO: M√©todo para probar el tama√±o de papel de una impresora espec√≠fica
  Future<bool> printPaperSizeTestForPrinter(String printerName) async {
    final printer = _connectedPrinters[printerName];
    if (printer == null) {
      print('‚ùå Impresora no encontrada: $printerName');
      return false;
    }

    if (!isPrinterConnected(printerName)) {
      print('‚ùå Impresora no conectada: $printerName');
      return false;
    }

    try {
      // Obtener el tama√±o de papel espec√≠fico de esta impresora
      final paperSize = getPaperSize(printerName);

      print(
        'üìÑ Generando prueba de tama√±o de papel para $printerName: $paperSize',
      );

      List<int> bytes = [];
      final profile = await CapabilityProfile.load(name: 'XP-N160I');
      final generator = Generator(paperSize, profile);

      bytes += generator.setGlobalCodeTable('CP1252');
      bytes += generator.reset();

      bytes += generator.text(
        'PRUEBA DE TAMA√ëO DE PAPEL',
        styles: const PosStyles(
          align: PosAlign.center,
          bold: true,
          height: PosTextSize.size2,
        ),
      );
      bytes += generator.text(
        '========================',
        styles: const PosStyles(align: PosAlign.center),
      );

      // Informaci√≥n de la impresora
      bytes += generator.text(
        'Impresora: $printerName',
        styles: const PosStyles(align: PosAlign.center, bold: true),
      );
      bytes += generator.text(
        'Tipo: ${printer.typePrinter.toString().split('.').last.toUpperCase()}',
        styles: const PosStyles(align: PosAlign.center),
      );

      // Mostrar tama√±o de papel configurado
      final paperSizeText =
          paperSize == PaperSize.mm58
              ? "58mm"
              : paperSize == PaperSize.mm80
              ? "80mm"
              : paperSize == PaperSize.mm72
              ? "72mm"
              : "Desconocido";

      bytes += generator.text(
        'Tama√±o configurado: $paperSizeText',
        styles: const PosStyles(align: PosAlign.center, bold: true),
      );

      bytes += generator.feed(1);

      // Indicadores de ancho seg√∫n el tama√±o configurado
      if (paperSize == PaperSize.mm58) {
        bytes += generator.text(
          '1234567890123456789012345678901234',
          styles: const PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '    58mm - 34 caracteres aprox.    ',
          styles: const PosStyles(align: PosAlign.center),
        );
      } else if (paperSize == PaperSize.mm72) {
        bytes += generator.text(
          '123456789012345678901234567890123456789012',
          styles: const PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '    72mm - 42 caracteres aprox.    ',
          styles: const PosStyles(align: PosAlign.center),
        );
      } else {
        bytes += generator.text(
          '123456789012345678901234567890123456789012345678',
          styles: const PosStyles(align: PosAlign.center),
        );
        bytes += generator.text(
          '     80mm - 48 caracteres aprox.     ',
          styles: const PosStyles(align: PosAlign.center),
        );
      }

      bytes += generator.feed(2);
      bytes += generator.cut();

      // Imprimir usando el m√©todo espec√≠fico para esa impresora
      final success = await printBytesToPrinter(bytes, printerName);

      if (success) {
        print('‚úÖ Prueba de tama√±o de papel enviada a $printerName');
      }

      return success;
    } catch (e) {
      print(
        '‚ùå Error al imprimir prueba de tama√±o de papel para $printerName: $e',
      );
      return false;
    }
  }

  // M√©todo para liberar recursos cuando se destruye la instancia
  @override
  void dispose() {
    // Cancelar suscripciones
    _subscription?.cancel();
    _subscriptionBtStatus?.cancel();
    _subscriptionUsbStatus?.cancel();

    // Cancelar el timer de verificaci√≥n
    _connectionCheckTimer?.cancel();

    // Desconectar de la impresora si est√° conectada
    if (_isConnected && selectedPrinter != null) {
      printerManager.disconnect(type: selectedPrinter!.typePrinter);
    }

    super.dispose();
  }

  // Olvidar la impresora seleccionada actualmente
  Future<void> forgetCurrentPrinter() async {
    if (selectedPrinter != null) {
      try {
        // Desconectar de la impresora actual si est√° conectada
        if (_isConnected) {
          await PrinterManager.instance.disconnect(
            type: selectedPrinter!.typePrinter,
          );
          _isConnected = false;
        }

        // Eliminar de la configuraci√≥n guardada
        await ConfigService.saveSelectedPrinter(null);

        // Limpiar la referencia local
        selectedPrinter = null;

        print('Impresora olvidada correctamente');
        notifyListeners();
      } catch (e) {
        print('Error al olvidar la impresora: $e');
      }
    }
  }
}
